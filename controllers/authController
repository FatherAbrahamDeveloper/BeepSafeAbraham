const AppError = require("../error/appError");
const { PrismaClient } = require("@prisma/client");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const prisma = new PrismaClient();

const signup = async (req, res, next) => {
  try {
    const { firstName, lastName, email, password } = req.body;
    if (!firstName || !lastName || !email || !password) {
      return next(new AppError("missing fields", 400));
    }
    const existingUser = await prisma.user.findUnique({ where: { email } });
    if (existingUser) return next(new AppError("email already exist", 400));

    const hashedPassword = await bcrypt.hash(password, 10);

    const addUser = await prisma.user.create({
      data: {
        firstName,
        lastName,
        email,
        password: hashedPassword,
      },
    });

    res.status(200).json({
      message: "User created",
      user: {
        id: addUser.id,
        firstName: addUser.firstName,
        LastName: addUser.LastName,
        email: addUser.email,
        hashedPassword,
      },
    });
  } catch (error) {
    next(error);
  }
};

const login = async (req, res, next) => {
  try {
    const { email, password } = req.body;
    if (!email || !password) return next(new AppError("missing fields", 400));

    const user = await prisma.user.findUnique({ where: { email } });

    if (!user) return next(new AppError("invalid email"));

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return next(new AppError("invalid password"));

    const token = jwt.sign({ id: user.id }, process.env.JWT_SECRET, {
      expiresIn: "7d",
    });
    res.status(200).json({
      message: "logged in successfully",
      user: {
        id: user.id,
        firstname: user.firstName,
        lastName,
        lastName: user.lastName,
        email: user.email,
      },
      token,
    });
  } catch (error) {
    next(error);
  }
};

module.exports = { signup, login };
