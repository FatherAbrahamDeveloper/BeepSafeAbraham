generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // Primary Identifier
  id                 Int             @id @default(autoincrement())

  // Basic Info
  firstName          String
  lastName           String
  email              String          @unique
  password           String
  phone              String?         // Optional, for SMS reset later

  // Account Status
  isVerified         Boolean         @default(false)
  verificationToken  String?

  // Password Reset
  resetToken         String?
  resetTokenExpiry   BigInt?

  // Relations
  reports            Report[]        // Removed duplicate
  invites            Invite[]
  trustedCircle      TrustedCircle[]
  // Timestamps
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
}

model Report {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  location    String
  latitude    Float?   // New field: Latitude of the incident
  longitude   Float?   // New field: Longitude of the incident
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
}

model NewsletterSubscriber {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  isConfirmed  Boolean  @default(true)
  createdAt    DateTime @default(now())
}

model ContactMessage {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String
  phoneNumber String
  subject     String
  message     String
  createdAt   DateTime @default(now())
}

model Invite {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  isUsed      Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model TrustedCircle {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  phoneNumber String
  email       String   @unique
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
}

model SecurityAgency {
  id        Int      @id @default(autoincrement())
  state     String
  type      String
  name      String
  phone     String?
  address   String?
  createdAt DateTime @default(now())

  @@index([state])
  @@index([type])
}
